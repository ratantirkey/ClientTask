continue
search_data(json_data, field_to_search, value_to_search)
continue
$PROGRAM_NAME
__FILE__
 parse_json_file(file_path)
continue
parse_json_file(file_path)
continue
parse_json_file(file_path).first 2
parse_json_file(file_path).first
parse_json_file(file_path)
file_path
parse_json_file(file_path)
parse_json_file(file_path))
continue
last_response.body
last_response
continue
n
params
continue
result
expect(result).to output(/Duplicate clients found/).to_stdout
result
continue
result
continue
result
continue
n
expect(result).to output(["No duplicate clients found."])
result
continue
result
n
continue
data
mc
continue
data.select { |client| client['full_name']&.downcase&.include?(query&.downcase) }
data[0]
data
query
field
data
continue
n
data
value
field
continue
 expect { search_data(data, 'id', 1) }.to output(/Error reading file/).to_stderr
allow(File).to receive(:read).and_raise(StandardError.new('Error reading file'))
File.read
File
continue
data
continue
data
continue
data
data.to_json
continue
data
continue
data
continue
field
data[0][field]
data[0][field.to_s]
data[0]
data[0][field]
data[0][field].to_s
data[0][field]to_s
field
data[0][field]
data[0]
data
data.select { |item| item[field].to_s&.include?(value.to_s)}
data.select { |item| item[field].to_s&.include?(value.to_s)
n
value
n
data
field
value
continue
data
continue
data
continue
data
data.select { |item| item[field].to_s&.include?(value.to_s) }
n
field
value
n
value
field
data
continue
data
result
continue
File.read("./client/client.json")
File.read(file_path)
file_path
parse_json_file(file_path)
continue
value
data.select { |item| item[field]&.include?(value) }
continue
valid_json?value
continue
MyJSON.valid?value
valid_json?value
value
continue
value.is_a?(String)
value
continue
ab.is_a?String
ab = JSON.parse value
value.is_a?JSON
value.json?
value.is_json?
valid_json? value
JSON.parse value
value
continue
value
continue
n
params
continue
data.select { |item| item[field].to_s&.include?(value.to_s) }
value
data.select { |item| item[field].to_s&.include?(value) }
continue
value
 data.select { |item| item[field].to_s&.include?(value) }
continue
value
data.select { |item| item[field].to_s.include? "1"}
data.select { |item| item[field].to_s == "1"}
data.select { |item| item[field].to_s }
data.select { |item| item[field].to_s.include?(value) }
1.to_s
field
data.select { |item| item[field].to_s&.include?(value) }
continue
data[0][field].to_s.include?value.to_s
data[0][field].include?value.to_s
data[0][field].include?value
data[0][field]
data[0]
 data.select { |item| item[field]&.include?(value) }
field
value
continue
 data.select { |item| item[field]&.downcase&.include?(value.downcase) }
continue
data.select { |item| item[field]&.downcase&.include?(value.downcase) }
continue
data[0][field].downcase
data.select { |item| item[field]&.downcase&.include?(value) }
data[0][field].include? value
data[0][field].include? query
data[0][field]
data[0]
data
field
value
continue
value
continue
JSON.parse value
field
value
query
data
continue
value
data
